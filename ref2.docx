using System;
using System.Runtime.InteropServices;
using System.Text;

public unsafe class PvrDecoder
{
    // The base64 decoder and cd64 table are omitted for brevity; use your working one.

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct PVR_DBRecFixed
    {
        public uint pvr_id;
        public uint programID;
        public uint ui32SeriesID;
        public uint quideStartSeconds;
        public uint scheduleTime;
        public PVR_Union pvrData;
        public ushort dataLen;     // Length of vardata trailing bytes
        public ushort title;
        public ushort shortDescription;
        public ushort filenameRoot;
        public ushort moreInfo;
        public ushort serviceID;
        public ushort dispChannel;
        public ushort quideRunningTime;
        public ushort qualifiers;
        public ushort callLetters;
        public ushort pvrFlags;
        public byte category;
        public byte eventFlags;
        public byte showtimeFlags;
        public byte ratings;
        public byte contentAdvisory;
        public byte pvrRecordType;
        public byte earlyMinutes;
        public byte lateMinutes;
        public byte recordQuality;
        public fixed byte ClientID[32];
        public fixed byte eventClientId[32];
        public uint unusedS;
        public uint unused6;
        // NO vardata field here, since it's variable length
    }

    [StructLayout(LayoutKind.Explicit, Pack = 1)]
    public struct PVR_Union
    {
        [FieldOffset(0)] public PVR_InstanceData instanceData;
        [FieldOffset(0)] public PVR_SeriesData seriesData;
        [FieldOffset(0)] public PVR_SyncNGoData syncData;
    }

    // Your other structs (PVR_InstanceData, PVR_SeriesData, PVR_SyncNGoData) here...

    public static void ParseData(byte[] binData)
    {
        int offset = 0;

        // Check "VMS" header
        if (binData.Length < 4) throw new Exception("Data too short");

        string vms = Encoding.ASCII.GetString(binData, offset, 3);
        offset += 4; // Skip VMS + NULL byte

        if (vms != "VMS") throw new Exception("Invalid header");

        if (binData.Length < offset + 8)
            throw new Exception("Not enough data for platformId and numSeries");

        uint platformId = BitConverter.ToUInt32(binData, offset);
        offset += 4;

        uint numSeries = BitConverter.ToUInt32(binData, offset);
        offset += 4;

        Console.WriteLine($"PlatformID: {platformId}, NumSeries: {numSeries}");

        int fixedSize = Marshal.SizeOf<PVR_DBRecFixed>();

        for (int i = 0; i < numSeries; i++)
        {
            if (offset + fixedSize > binData.Length)
            {
                Console.WriteLine("Not enough data for fixed struct");
                break;
            }

            // Read fixed part
            PVR_DBRecFixed recFixed;
            GCHandle handle = GCHandle.Alloc(binData, GCHandleType.Pinned);
            try
            {
                IntPtr ptr = IntPtr.Add(handle.AddrOfPinnedObject(), offset);
                recFixed = Marshal.PtrToStructure<PVR_DBRecFixed>(ptr);
            }
            finally
            {
                handle.Free();
            }

            offset += fixedSize;

            // Now read variable vardata
            int dataLen = recFixed.dataLen;

            if (offset + dataLen > binData.Length)
            {
                Console.WriteLine("Not enough data for vardata");
                break;
            }

            byte[] vardata = new byte[dataLen];
            Array.Copy(binData, offset, vardata, 0, dataLen);

            offset += dataLen;

            Console.WriteLine($"Record {i + 1}: pvr_id={recFixed.pvr_id}, dataLen={dataLen}");
            // TODO: Further decode vardata or recFixed.pvrData union based on recFixed.pvrRecordType

            // Example: if you want to parse vardata as a string (just for illustration):
            // string varDataStr = Encoding.ASCII.GetString(vardata);
            // Console.WriteLine($"Vardata string: {varDataStr}");
        }

        Console.WriteLine($"Total bytes parsed: {offset} / {binData.Length}");
    }

    // Your base64 decode function here (or pass pre-decoded byte[] data)
}
