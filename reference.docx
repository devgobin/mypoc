using System;
using System.Collections.Generic;
using System.Text;

public class DVRDecoder
{
    // Define the PVR_DBRec structure in C#
    public struct PVR_DBRec
    {
        public uint pvr_id;    
        public uint programID;    
        public uint ui32SeriesID; 
        public long quideStartSeconds; 
        public long scheduleTime;  
        public PVR_InstanceData pvrData; 
        public ushort dataLen;    
        public ushort title;    
        public ushort shortDescription;    
        public ushort filenameRoot;    
        public ushort moreInfo;    
        public ushort serviceID;    
        public ushort dispChannel;    
        public ushort quideRunningTime;    
        public ushort qualifiers;    
        public ushort callLetters;    
        public ushort pvrFlags;    
        public byte category;    
        public byte eventFlags;    
        public byte showtimeFlags1;    
        public byte mpaaRating;    
        public byte svldRating;    
        public byte contentAdvisory;    
        public byte pvrRecordType;    
        public byte earlyMinutes;    
        public byte lateMinutes;    
        public byte recordQuality;    
        public string ClientID;    
        public string eventClientId;    
        public uint unusedS;    
        public uint unused6;    
        public string vardata;    
    }

    public struct PVR_InstanceData
    {
        public long planned_RecStart;
        public uint planned_RecDuration;
        public long estDeletion;
        public HIRES_Time recStart;
        public HIRES_Time recDuration;
        public HIRES_Time pbPosition;
        public uint platformContentID;
        public uint RecHistoryCause;
        public uint unused2;
        public ushort instanceFlags;
        public ushort unused4;
        public uint fromParentID;
    }

    public struct HIRES_Time
    {
        public uint Seconds;
        public uint Milliseconds;
    }

    private static readonly string cd64 = "|$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW$$$$$$XYZ[\\]^_`abcdefghijklmnopq";

    // Get the data length from the base64 encoded string
    private static int GetDataLength(int codeLength)
    {
        return codeLength - codeLength / 4;
    }

    // Decoding function for base64 using the cd64 map
    private static void DecodeBlock(byte[] input, byte[] output)
    {
        output[0] = (byte)(input[0] << 2 | input[1] >> 4);
        output[1] = (byte)(input[1] << 4 | input[2] >> 2);
        output[2] = (byte)((input[2] << 6) | input[3]);
    }

    private static int Base64Decode(string inputCode, int codeLength, ref byte[] outputData)
    {
        byte[] input = new byte[4], output = new byte[3];
        int i = 0, len = 0, j = 0, k = 0;

        int outputLength = GetDataLength(codeLength);
        outputData = new byte[outputLength + 1];
        j = 0;

        while (k < codeLength)
        {
            for (len = 0; i < 4 && k < codeLength; i++)
            {
                byte v = 0;
                while (k < codeLength && v == 0)
                {
                    v = (byte)inputCode[k++];
                    v = (byte)((v < 43 || v > 122) ? 0 : cd64[v - 43]);
                    if (v != 0) v = (byte)((v == '$') ? 0 : v - 61);
                }

                if (k < codeLength)
                {
                    len++;
                    if (v != 0)
                    {
                        input[i] = (byte)(v - 1);
                    }
                    else
                    {
                        input[i] = 0;
                    }
                }
            }

            if (len > 0)
            {
                DecodeBlock(input, output);
                for (i = 0; i < len - 1; i++)
                {
                    outputData[j++] = output[i];
                }
            }
        }

        return j;
    }

    // Main function that mimics ProcessSrsExportRequest to decode and extract PVR_DBRec structs
    public static List<PVR_DBRec> ProcessSrsExportRequest(string encodedData)
    {
        byte[] decodedData = null;
        int decodedLength = Base64Decode(encodedData, encodedData.Length, ref decodedData);

        List<PVR_DBRec> records = new List<PVR_DBRec>();
        int index = 0;

        while (index < decodedLength)
        {
            PVR_DBRec rec = new PVR_DBRec();

            // Read PVR_DBRec fields
            rec.pvr_id = BitConverter.ToUInt32(decodedData, index);
            rec.programID = BitConverter.ToUInt32(decodedData, index + 4);
            rec.ui32SeriesID = BitConverter.ToUInt32(decodedData, index + 8);
            rec.quideStartSeconds = BitConverter.ToInt64(decodedData, index + 12);
            rec.scheduleTime = BitConverter.ToInt64(decodedData, index + 20);

            // Nested structure: PVR_InstanceData
            rec.pvrData = new PVR_InstanceData
            {
                planned_RecStart = BitConverter.ToInt64(decodedData, index + 28),
                planned_RecDuration = BitConverter.ToUInt32(decodedData, index + 36),
                estDeletion = BitConverter.ToInt64(decodedData, index + 40),
                recStart = new HIRES_Time
                {
                    Seconds = BitConverter.ToUInt32(decodedData, index + 48),
                    Milliseconds = BitConverter.ToUInt32(decodedData, index + 52)
                },
                recDuration = new HIRES_Time
                {
                    Seconds = BitConverter.ToUInt32(decodedData, index + 56),
                    Milliseconds = BitConverter.ToUInt32(decodedData, index + 60)
                },
                pbPosition = new HIRES_Time
                {
                    Seconds = BitConverter.ToUInt32(decodedData, index + 64),
                    Milliseconds = BitConverter.ToUInt32(decodedData, index + 68)
                },
                platformContentID = BitConverter.ToUInt32(decodedData, index + 72),
                RecHistoryCause = BitConverter.ToUInt32(decodedData, index + 76),
                unused2 = BitConverter.ToUInt32(decodedData, index + 80),
                instanceFlags = BitConverter.ToUInt16(decodedData, index + 84),
                unused4 = BitConverter.ToUInt16(decodedData, index + 86),
                fromParentID = BitConverter.ToUInt32(decodedData, index + 88)
            };

            // Reading remaining fields
            rec.dataLen = BitConverter.ToUInt16(decodedData, index + 92);
            rec.title = BitConverter.ToUInt16(decodedData, index + 94);
            rec.shortDescription = BitConverter.ToUInt16(decodedData, index + 96);
            rec.filenameRoot = BitConverter.ToUInt16(decodedData, index + 98);
            rec.moreInfo = BitConverter.ToUInt16(decodedData, index + 100);
            rec.serviceID = BitConverter.ToUInt16(decodedData, index + 102);
            rec.dispChannel = BitConverter.ToUInt16(decodedData, index + 104);
            rec.quideRunningTime = BitConverter.ToUInt16(decodedData, index + 106);
            rec.qualifiers = BitConverter.ToUInt16(decodedData, index + 108);
            rec.callLetters = BitConverter.ToUInt16(decodedData, index + 110);
            rec.pvrFlags = BitConverter.ToUInt16(decodedData, index + 112);
            rec.category = decodedData[index + 114];
            rec.eventFlags = decodedData[index + 115];
            rec.showtimeFlags1 = decodedData[index + 116];
            rec.mpaaRating = decodedData[index + 117];
            rec.svldRating = decodedData[index + 118];
            rec.contentAdvisory = decodedData[index + 119];
            rec.pvrRecordType = decodedData[index + 120];
            rec.earlyMinutes = decodedData[index + 121];
            rec.lateMinutes = decodedData[index + 122];
            rec.recordQuality = decodedData[index + 123];

            // ClientID and eventClientId (assuming they are strings)
            rec.ClientID = Encoding.ASCII.GetString(decodedData, index + 124, 32).Trim('\0');
            rec.eventClientId = Encoding.ASCII.GetString(decodedData, index + 156, 32).Trim('\0');

            // Reading unused and vardata fields
            rec.unusedS = BitConverter.ToUInt32(decodedData, index + 188);
            rec.unused6 = BitConverter.ToUInt32(decodedData, index + 192);
            rec.vardata = Encoding.ASCII.GetString(decodedData, index + 196, rec.dataLen - 4); // Assumed vardata length is based on dataLen

            records.Add(rec);
            index += 200; // Adjust according to the total size of PVR_DBRec
        }

        return records;
    }
}

// Example Usage:
class Program
{
    static void Main(string[] args)
    {
        string encodedData = "<Your Base64 Encoded Data Here>";
        List<DVRDecoder.PVR_DBRec> records = DVRDecoder.ProcessSrsExportRequest(encodedData);

        foreach (var record in records)
        {
            Console.WriteLine($"PVR_ID: {record.pvr_id}, ProgramID: {record.programID}, SeriesID: {record.ui32SeriesID}");
        }
    }
}
