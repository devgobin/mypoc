using System;
using System.Runtime.InteropServices;

namespace PvrDatabase
{
    public static class PvrConstants
    {
        public const int MAX_DVR_FILENAME_LEN = 256;
        public const int MAX_PGM_NAME_LEN = 256;
        public const int MAX_PGM_DESC_LEN = 512;
        public const int MAX_TRANSFER_CLIENT = 10;
        public const int MAX_TRNSD_CLIENTID_LEN = 64;
        public const int MAX_CLIENTID_LEN = 64;
        
        // Calculate the maximum size needed for the union
        public const int MAX_UNION_SIZE = 1024; // Adjust based on your largest struct
    }

    // Series Data Structure with explicit layout
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct PVR_SeriesData
    {
        public ushort numbgrToKeep;
        public byte seriesFlags;
        public byte dayMask;
        public byte matchHour;
        public byte matchMinute;
        public uint RecHistoryCause;
        public uint unused2;
        public uint unused3;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_PGM_NAME_LEN)]
        public byte[] aucSeriesName;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_PGM_DESC_LEN)]
        public byte[] aucSeriesDescription;
    }

    // Sync and Go Data Structure with explicit layout
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct PVR_SyncNGoData
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_DVR_FILENAME_LEN)]
        public byte[] dvrFileName;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_DVR_FILENAME_LEN)]
        public byte[] trnsdfFileName;
        
        public byte transcodeType;
        public byte resolution;
        public byte audiolang;
        public byte transdStatus;
        public ushort bitRate;
        public ushort syncFlags;
        
        [MarshalAs(UnmanagedType.U1)]
        public bool bDVSEnabled;
        
        [MarshalAs(UnmanagedType.U1)]
        public bool bAdaptionEnabled;
        
        public ushort copyCount;
        public uint unused1;
        public uint unused2;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_PGM_NAME_LEN)]
        public byte[] aucProgName;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_TRANSFER_CLIENT * PvrConstants.MAX_TRNSD_CLIENTID_LEN)]
        public byte[] unused3;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_TRANSFER_CLIENT * PvrConstants.MAX_TRNSD_CLIENTID_LEN)]
        public byte[] unused4;
    }

    // Instance Data Structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct PVR_InstanceData
    {
        public long planned_RecStart;
        public uint planned_RecDuration;
        public long estDeletion;
        public double recStart;
        public double recDuration;
        public double pbPosition;
        public uint platformContentID;
        public uint RecHistoryCause;
        public uint unused2;
        public ushort instanceFlags;
        public ushort unused4;
        public uint fromParentID;
    }

    // Main PVR Database Record Structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct PVR_DBRec
    {
        public uint pvr_id;
        public uint programID;
        public uint ui32SeriesID;
        public long guideStartSeconds;
        public long scheduleTime;
        
        // Replace union with byte array and manual access methods
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_UNION_SIZE)]
        public byte[] pvrDataBuffer;
        
        public ushort dataLen;
        public ushort title;
        public ushort shortDescription;
        public ushort filenameRoot;
        public ushort moreInfo;
        public ushort serviceID;
        public ushort dispChannel;
        public ushort guideRunningTime;
        public ushort qualifiers;
        public ushort callLetters;
        public ushort pvrFlags;
        public byte category;
        public byte eventFlags;
        public byte showtimeFlags1;
        private byte _ratingByte;
        public byte contentAdvisory;
        public byte pvrRecordType;
        public byte earlyMinutes;
        public byte lateMinutes;
        public byte recordQuality;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_CLIENTID_LEN)]
        public byte[] ClientID;
        
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = PvrConstants.MAX_CLIENTID_LEN)]
        public byte[] eventClientId;
        
        public uint unused5;
        public uint unused6;
        public IntPtr vardata;

        // Helper methods to access union data
        public PVR_InstanceData GetInstanceData()
        {
            var handle = GCHandle.Alloc(pvrDataBuffer, GCHandleType.Pinned);
            try
            {
                return (PVR_InstanceData)Marshal.PtrToStructure(
                    handle.AddrOfPinnedObject(), 
                    typeof(PVR_InstanceData));
            }
            finally
            {
                handle.Free();
            }
        }

        public PVR_SeriesData GetSeriesData()
        {
            var handle = GCHandle.Alloc(pvrDataBuffer, GCHandleType.Pinned);
            try
            {
                return (PVR_SeriesData)Marshal.PtrToStructure(
                    handle.AddrOfPinnedObject(), 
                    typeof(PVR_SeriesData));
            }
            finally
            {
                handle.Free();
            }
        }

        public PVR_SyncNGoData GetSyncNGoData()
        {
            var handle = GCHandle.Alloc(pvrDataBuffer, GCHandleType.Pinned);
            try
            {
                return (PVR_SyncNGoData)Marshal.PtrToStructure(
                    handle.AddrOfPinnedObject(), 
                    typeof(PVR_SyncNGoData));
            }
            finally
            {
                handle.Free();
            }
        }

        public byte MpaaRating
        {
            get => (byte)(_ratingByte & 0x0F);
            set => _ratingByte = (byte)((_ratingByte & 0xF0) | (value & 0x0F));
        }
        
        public byte SvldRating
        {
            get => (byte)((_ratingByte & 0xF0) >> 4);
            set => _ratingByte = (byte)((_ratingByte & 0x0F) | ((value & 0x0F) << 4));
        }
    }
}
