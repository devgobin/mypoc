<div class="d-flex align-items-center h-100">
    <div class="title">{{service.title}}</div>
    <span class="spacer"></span>
    <div class="pb-2">
        <span>User</span>
        <button mat-icon-button [matMenuTriggerFor]="menu">
            <img src="assets/useravatar.jpg" class="avatar" alt="User Avatar" />
        </button>
    </div>
</div>

<mat-menu #menu="matMenu">
    <button mat-menu-item (click)="logout()">
        <mat-icon>logout</mat-icon>
        <span>Logout</span>
    </button>
</mat-menu>

.title{
    color: #000000;
    font-weight: 500;
    font-size: 19px;
}

.spacer {
    flex: 1;
  }
  
  .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
  }

 imports: [
    CommonModule,
    RouterModule.forChild(routes),
    MatToolbarModule,
    MatMenuModule,
    MatIconModule,
    MatButtonModule,
  ],


import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HeaderComponent } from './header.component';
import { Routes, RouterModule } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatMenuModule } from '@angular/material/menu';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';






 <mat-tab label="History" class="h-100">
                            <div class="content-body p-3">
                                <mat-tab-group class="h-100">

                                    <!-- Trigger Notification Tab -->
                                    <mat-tab label="Trigger Notification" class="h-100">
                                        <div class="container-fluid">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <label class="tab-title">Select Notification Type and Group</label>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <!-- Select Notification Type -->
                                                <div class="col-md-6 d-flex">
                                                    <mat-form-field appearance="outline" class="w-100">
                                                        <mat-label>Select Notification Type<span
                                                                class="required">*</span></mat-label>
                                                        <mat-select formControlName="selectedItems" multiple required>
                                                            <mat-option value="df">df</mat-option>
                                                        </mat-select>
                                                    </mat-form-field>
                                                </div>

                                                <!-- Select Group -->
                                                <div class="col-md-6 d-flex">
                                                    <mat-form-field appearance="outline" class="w-100">
                                                        <mat-label>Select Group<span
                                                                class="required">*</span></mat-label>
                                                        <mat-select formControlName="selectedGroups" multiple required>
                                                            <mat-option value="hgg">hgg</mat-option>
                                                        </mat-select>
                                                    </mat-form-field>
                                                </div>
                                            </div>

                                            <div class="row mt-3">
                                                <!-- Selected Groups (optional future content) -->
                                            </div>

                                            <div class="row">
                                                <!-- Email Subject -->
                                                <div class="col-md-12">
                                                    <mat-form-field appearance="outline" class="w-100">
                                                        <mat-label>Email Subject<span
                                                                class="required">*</span></mat-label>
                                                        <textarea matInput formControlName="EmailSubject"
                                                            required></textarea>
                                                    </mat-form-field>
                                                </div>

                                                <!-- Email Template -->
                                                <div class="col-md-12">
                     
<label class="mat-label">E-Mail Template<span
                                                            class="required">*</span></label>
                                                    <quill-editor formControlName="EmailTemplate"
                                                        required></quill-editor>
                                                </div>
                                            </div>
                                        </div>
                                    </mat-tab>

                                </mat-tab-group>
                            </div>
                        </mat-tab>o





public class CustomBase64Decoder
{
    static readonly char[] cd64 = "|$$$}rstuvwxyz{$$$$$$$>?@ABCDEFGHIJKLMNOPQRSTUVW$$$$$$XYZ[\\]^_'abcdefghijklmnopq".ToCharArray();

    static int GetDataLength(int codeLength)
    {
        return (codeLength * 3) / 4;
    }

    static int GetCd64Value(char c)
    {
        if (c < 43 || c > 122)
            return -1;

        char v = cd64[c - 43];
        if (v == '$')
            return -1;

        return v - 61; // Matches `v = (unsigned char)((v == 'S') ? 0 : v - 61);`
    }

    static void DecodeBlock(byte[] input, byte[] output)
    {
        output[0] = (byte)((input[0] << 2) | (input[1] >> 4));
        output[1] = (byte)((input[1] << 4) | (input[2] >> 2));
        output[2] = (byte)(((input[2] << 6) & 0xC0) | input[3]);
    }

    public static int Decode(string inCode, out byte[] outData)
    {
        int codeLength = inCode.Length;
        byte[] inBuf = new byte[4];
        byte[] outBuf = new byte[3];
        List<byte> result = new List<byte>();

        int j = 0, k = 0;

        while (k < codeLength)
        {
            int len = 0;
            for (int i = 0; i < 4 && k < codeLength; i++)
            {
                int v = 0;
                while (k < codeLength && v <= 0)
                {
                    char ch = inCode[k++];
                    v = GetCd64Value(ch);
                }

                if (v >= 0)
                {
                    inBuf[i] = (byte)(v);
                    len++;
                }
                else
                {
                    inBuf[i] = 0;
                }
            }

            if (len > 0)
            {
                DecodeBlock(inBuf, outBuf);
                for (int i = 0; i < len - 1; i++)
                {
                    result.Add(outBuf[i]);
                }
            }
        }

        outData = result.ToArray();
        return outData.Length;
    }
}




